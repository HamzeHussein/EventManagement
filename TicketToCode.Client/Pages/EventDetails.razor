@page "/event/{id}"
@using TicketToCode.Client.Services
@using TicketToCode.Core.Models
@inject EventService EventService
@inject NavigationManager Navigation

<h3>Evenemangsdetaljer</h3>

@if (eventItem == null)
{
    <p>Hämtar detaljer...</p>
}
else
{
    <h4>@eventItem.Name</h4>
    <p>@eventItem.Description</p>
    <p>Datum: @eventItem.StartTime.ToString("yyyy-MM-dd HH:mm")</p>

    @if (showSuccessMessage)
    {
        <p style="color:green;">✅ Biljett bokad!</p>
    }
    else if (errorMessage != null)
    {
        <p style="color:red;">❌ @errorMessage</p>
    }

    <button @onclick="BookTicket">Boka Biljett</button>
}

@code {
    [Parameter] public int id { get; set; }
    private Event? eventItem;
    private bool showSuccessMessage = false;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            eventItem = await EventService.GetEventAsync(id);
        }
        catch (Exception ex)
        {
            errorMessage = $"Fel vid hämtning: {ex.Message}";
        }
    }

    private async Task BookTicket()
    {
        if (eventItem == null)
            return;

        var success = await EventService.BookTicketAsync(eventItem.Id);

        if (success)
        {
            showSuccessMessage = true;
            errorMessage = null;
        }
        else
        {
            errorMessage = "Kunde inte boka biljetten.";
            showSuccessMessage = false;
        }
    }
}
