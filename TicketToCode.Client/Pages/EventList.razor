@page "/events"
@using TicketToCode.Client.Services
@using TicketToCode.Core.Models
@inject EventService EventService
@inject NavigationManager Navigation

<h3>Kommande Evenemang</h3>

@if (events == null)
{
    <p>Laddar evenemang...</p>
}
else if (!events.Any())
{
    <p>Inga evenemang hittades.</p>
}
else
{
    <ul>
        @foreach (var eventItem in events)
        {
            <li>
                <strong>@eventItem.Name</strong><br />
                <em>@eventItem.StartTime.ToString("yyyy-MM-dd HH:mm")</em><br />
                <span>Plats: @eventItem.Location</span><br />
                <span>Pris: @eventItem.Price kr</span><br />

                <button @onclick="() => BookTicket(eventItem.Id)">Boka Biljett</button>
                <button @onclick="() => ShowEventDetails(eventItem.Id)">Visa Detaljer</button>
            </li>
            <hr />
        }
    </ul>
}

@code {
    private List<Event>? events;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var result = await EventService.GetEventsAsync();
            events = result.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fel vid hämtning av evenemang: {ex.Message}");
        }
    }

    private async Task BookTicket(int eventId)
    {
        var success = await EventService.BookTicketAsync(eventId);
        if (success)
            Console.WriteLine($"Biljett bokad för event {eventId}");
        else
            Console.WriteLine("Kunde inte boka biljetten.");
    }

    private void ShowEventDetails(int eventId)
    {
        Navigation.NavigateTo($"/event/{eventId}");
    }
}
